import { getRepository } from 'typeorm';
import {CreateVulnerabilityDto,  UpdateVulnerabilityDto, FindVulnerabilityDto} from './vulnerability.dto';
import Vulnerability from '../../entities/vulnerability.entity';
import { modifyEntries } from '../../utils/modifyEntries';



class VulnerabilityService {
    private vulnerabilityRepository = getRepository(Vulnerability)

    public addVulnerability = async (vulnerabilityData: CreateVulnerabilityDto) => {
        try {
            const vulnerability = await this.vulnerabilityRepository.save(vulnerabilityData);
            return(vulnerability)
        } catch (error) {
            switch (error.code) {
                case "23503":
                    throw new Error("Reference is missing")
                case "23505":
                    throw new Error("Vulnerability already exist")
                default:
                    throw new Error(error.message);
            }
        }
    }

    public getVulnerability = async (filters,relations) => {
        const vulnerability = await this.vulnerabilityRepository.findOne({where : filters, relations: relations});
        return (vulnerability);
    }
    public getVulnerabilities = async (filters, limit, offset) => {
        const vulnerabilities : Vulnerability[] = await this.vulnerabilityRepository.find({where:filters})
        return(vulnerabilities);
    }
    public modifyVulnerability = async (vulnerability: Vulnerability,vulnerabilityData : UpdateVulnerabilityDto) => {
            try {
                const modifyedVulnerability = await this.vulnerabilityRepository.save(Object.assign(vulnerability,vulnerabilityData));
                return(modifyedVulnerability);
            } catch (error) {
                switch (error.code) {
                    case "23503":
                        throw new Error("Reference is missing")
                    default:
                        throw new Error(error.message);
                }
            }
    }

    public deleteVulnerability = async (id) => {
        const deletedVulnerability = await this.vulnerabilityRepository.delete(id);
        return(deletedVulnerability);
    }





}


export default VulnerabilityService;
